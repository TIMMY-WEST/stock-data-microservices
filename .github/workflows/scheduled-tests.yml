name: Scheduled Regression Tests

on:
  schedule:
    # 毎日深夜2時（JST）に実行 (17:00 UTC)
    - cron: '0 17 * * *'
  workflow_dispatch:  # 手動実行も可能

jobs:
  regression-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.12']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: stock_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: develop  # developブランチで回帰テスト実行
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov bandit safety playwright black flake8 isort mypy
        playwright install chromium
        
    - name: Set up test database
      run: |
        # データベース初期化スクリプトがある場合
        # python scripts/init_test_db.py
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/stock_test_db
        
    - name: Run Full Regression Test Suite
      run: |
        # 単体テスト
        python -m pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term
        
        # 統合テスト  
        python -m pytest tests/integration/ -v
        
        # E2Eテスト（アプリケーション起動）
        python run.py &
        APP_PID=$!
        sleep 15  # アプリ起動待ち
        python -m pytest tests/e2e/ -v
        kill $APP_PID  # アプリケーション停止
        
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/stock_test_db
        REDIS_URL: redis://localhost:6379
        FLASK_ENV: testing
        
    - name: Security Scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Performance Baseline Check
      run: |
        # パフォーマンスベースラインチェック
        # python -m pytest tests/performance/ -v --benchmark-only
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/stock_test_db
        REDIS_URL: redis://localhost:6379
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: regression-test-results-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
          coverage.xml
          
    - name: Notify on failure
      if: failure()
      run: |
        echo "::error::Regression tests failed on develop branch"
        # 失敗時の通知ロジック（Slack等）を追加可能